"""add_password_reset_fields

Revision ID: 9d7b0f0565a7
Revises: b1234567890a
Create Date: 2024-11-22 16:27:11.960168

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9d7b0f0565a7'
down_revision: Union[str, None] = 'b1234567890a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
 # Drop tables in correct order (child tables first)
    op.drop_table('comments')
    op.drop_table('labels')
    op.drop_table('attachments')
    op.drop_table('list_templates')
    op.drop_table('board_members')
    op.drop_table('activities')
    op.drop_table('cards')
    op.drop_table('lists')
    op.drop_table('board_templates')
    op.drop_table('boards')
    
    # Drop old users table
    op.drop_table('users')
    
    # Create new users table with password reset fields
    op.create_table('users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(), nullable=True),
        sa.Column('email', sa.String(), nullable=True),
        sa.Column('hashed_password', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('password_reset_token', sa.String(), nullable=True),
        sa.Column('password_reset_expires', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=True)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('DROP TABLE IF EXISTS users CASCADE')
    op.create_table('boards',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('boards_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='boards_owner_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='boards_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('users',
        sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('username', sa.VARCHAR(), nullable=True),
        sa.Column('email', sa.VARCHAR(), nullable=True),
        sa.Column('hashed_password', sa.VARCHAR(), nullable=True),
        sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id', name='users_pkey')
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=True)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.create_index('ix_boards_title', 'boards', ['title'], unique=False)
    op.create_index('ix_boards_id', 'boards', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=True)
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.create_table('comments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('card_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['cards.id'], name='comments_card_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='comments_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='comments_pkey')
    )
    op.create_index('ix_comments_id', 'comments', ['id'], unique=False)
    op.create_table('attachments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('filename', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('card_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['cards.id'], name='attachments_card_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='attachments_pkey')
    )
    op.create_index('ix_attachments_id', 'attachments', ['id'], unique=False)
    op.create_table('labels',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('card_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['cards.id'], name='labels_card_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='labels_pkey')
    )
    op.create_index('ix_labels_id', 'labels', ['id'], unique=False)
    op.create_table('lists',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('lists_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('board_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['board_id'], ['boards.id'], name='lists_board_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='lists_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_lists_title', 'lists', ['title'], unique=False)
    op.create_index('ix_lists_id', 'lists', ['id'], unique=False)
    op.create_table('cards',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('list_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['list_id'], ['lists.id'], name='cards_list_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='cards_pkey')
    )
    op.create_index('ix_cards_title', 'cards', ['title'], unique=False)
    op.create_index('ix_cards_id', 'cards', ['id'], unique=False)
    op.create_table('list_templates',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('board_template_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['board_template_id'], ['board_templates.id'], name='list_templates_board_template_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='list_templates_pkey')
    )
    op.create_index('ix_list_templates_id', 'list_templates', ['id'], unique=False)
    op.create_table('board_members',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('board_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('permission_level', postgresql.ENUM('VIEW', 'EDIT', 'ADMIN', name='permissionlevel'), server_default=sa.text("'VIEW'::permissionlevel"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['board_id'], ['boards.id'], name='board_members_board_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='board_members_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='board_members_pkey')
    )
    op.create_index('ix_board_members_id', 'board_members', ['id'], unique=False)
    op.create_table('activities',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('board_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('activity_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('details', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['board_id'], ['boards.id'], name='activities_board_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='activities_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='activities_pkey')
    )
    op.create_index('ix_activities_id', 'activities', ['id'], unique=False)
    op.create_table('board_templates',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='board_templates_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='board_templates_pkey')
    )
    op.create_index('ix_board_templates_name', 'board_templates', ['name'], unique=False)
    op.create_index('ix_board_templates_id', 'board_templates', ['id'], unique=False)
    # ### end Alembic commands ###
